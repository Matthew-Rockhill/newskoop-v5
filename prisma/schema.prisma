generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  STAFF
  RADIO
}

enum StaffRole {
  SUPERADMIN
  ADMIN
  EDITOR
  SUB_EDITOR
  JOURNALIST
  INTERN
}

enum TranslationLanguage {
  AFRIKAANS
  XHOSA
}

enum Province {
  EASTERN_CAPE
  FREE_STATE
  GAUTENG
  KWAZULU_NATAL
  LIMPOPO
  MPUMALANGA
  NORTHERN_CAPE
  NORTH_WEST
  WESTERN_CAPE
  NATIONAL
}

// Newsroom enums
enum StoryStatus {
  DRAFT
  IN_REVIEW
  NEEDS_REVISION
  PENDING_APPROVAL
  PENDING_TRANSLATION
  APPROVED
  READY_TO_PUBLISH
  PUBLISHED
  ARCHIVED
}


enum CommentType {
  GENERAL
  REVISION_REQUEST
  APPROVAL
  REJECTION
  EDITORIAL_NOTE
}

enum TagCategory {
  LANGUAGE
  RELIGION
  LOCALITY
  GENERAL
}

// Announcement enums
enum AnnouncementPriority {
  LOW
  MEDIUM
  HIGH
}

enum AnnouncementTargetAudience {
  ALL
  NEWSROOM
  RADIO
}

// Translation workflow enums
enum TranslationStatus {
  PENDING
  IN_PROGRESS
  NEEDS_REVIEW
  APPROVED
  REJECTED
  PUBLISHED
}

enum StoryLanguage {
  ENGLISH
  AFRIKAANS
  XHOSA
}

enum BulletinScheduleType {
  WEEKDAY
  WEEKEND
  PUBLIC_HOLIDAY
}

enum BulletinStatus {
  DRAFT
  IN_REVIEW
  NEEDS_REVISION
  APPROVED
  PUBLISHED
  ARCHIVED
}

// Email tracking enums
enum EmailType {
  WELCOME
  PASSWORD_RESET
  MAGIC_LINK
  NOTIFICATION
  SYSTEM
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
  BOUNCED
  DELIVERED
}

model User {
  id                    String                @id @default(cuid())
  email                 String                @unique
  firstName             String
  lastName              String
  mobileNumber          String?
  password              String
  userType              UserType
  isActive              Boolean               @default(true)
  isPrimaryContact      Boolean               @default(false)
  mustChangePassword    Boolean               @default(false)
  translationLanguage   TranslationLanguage?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  lastLoginAt           DateTime?
  resetToken           String?
  resetTokenExpiresAt  DateTime?
  profilePictureUrl    String?
  defaultLanguagePreference String?   // For radio interface language preference
  
  staffRole             StaffRole?
  
  radioStationId        String?
  radioStation          Station?              @relation(fields: [radioStationId], references: [id])
  
  sessions              Session[]
  auditLogs             AuditLog[]
  emailLogs             EmailLog[]
  
  // Newsroom relationships
  authoredStories       Story[]               @relation("AuthoredStories")
  assignedStories       Story[]               @relation("AssignedStories")
  reviewedStories       Story[]               @relation("ReviewedStories")
  publishedStories      Story[]               @relation("PublishedStories")
  uploadedAudioClips    AudioClip[]
  comments              Comment[]
  resolvedComments      Comment[]             @relation("ResolvedComments")
  
  // Translation relationships
  assignedTranslations  Translation[]         @relation("AssignedTranslations")
  reviewedTranslations  Translation[]         @relation("ReviewedTranslations")
  
  // Announcement relationships
  authoredAnnouncements Announcement[]        @relation("AuthoredAnnouncements")
  announcementDismissals UserAnnouncementDismissal[]
  
  // Bulletin relationships
  authoredBulletins     Bulletin[]            @relation("AuthoredBulletins")
  reviewedBulletins     Bulletin[]            @relation("ReviewedBulletins")
  publishedBulletins    Bulletin[]            @relation("PublishedBulletins")
  bulletinSchedules     BulletinSchedule[]
  
  @@index([email])
  @@index([userType])
  @@index([radioStationId])
  @@index([translationLanguage])
}

model Station {
  id                    String                @id @default(cuid())
  name                  String
  description           String?
  logoUrl               String?
  province              Province              @default(GAUTENG)
  
  contactNumber         String?
  contactEmail         String?
  website               String?
  
  isActive              Boolean               @default(true)
  hasContentAccess      Boolean               @default(true)
  
  // Content filtering
  allowedLanguages      String[]              @default(["English", "Afrikaans", "Xhosa"])
  allowedReligions      String[]              @default(["Christian", "Muslim", "Neutral"])
  blockedCategories     String[]              @default([])
  
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  
  users                 User[]
  
  @@index([province])
  @@index([isActive])
}

model Session {
  id                    String                @id @default(cuid())
  sessionToken          String                @unique
  userId                String
  expires               DateTime
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model AuditLog {
  id                    String                @id @default(cuid())
  userId                String
  user                  User                  @relation(fields: [userId], references: [id])
  action                String
  entityType            String?
  entityId              String?
  metadata              Json?
  ipAddress             String?
  userAgent             String?
  createdAt             DateTime              @default(now())
  
  @@index([userId])
  @@index([createdAt])
}

// NEWSROOM MODELS

model Story {
  id                String              @id @default(cuid())
  title             String
  slug              String              @unique
  content           String              @db.Text
  status            StoryStatus         @default(DRAFT)
  
  // Language and translation fields
  language          StoryLanguage       @default(ENGLISH)
  isTranslation     Boolean             @default(false)
  originalStoryId   String?
  originalStory     Story?              @relation("StoryTranslations", fields: [originalStoryId], references: [id])
  translations      Story[]             @relation("StoryTranslations")
  storyGroupId      String?
  storyGroup        StoryGroup?         @relation(fields: [storyGroupId], references: [id])
  
  // Authoring
  authorId          String
  author            User                @relation("AuthoredStories", fields: [authorId], references: [id])
  
  // Editorial workflow
  assignedToId      String?
  assignedTo        User?               @relation("AssignedStories", fields: [assignedToId], references: [id])
  reviewerId        String?
  reviewer          User?               @relation("ReviewedStories", fields: [reviewerId], references: [id])
  
  // Publishing
  publishedAt       DateTime?
  publishedBy       String?
  publisher         User?               @relation("PublishedStories", fields: [publishedBy], references: [id])
  
  // Categorization (optional during creation, required during approval)
  categoryId        String?
  category          Category?           @relation(fields: [categoryId], references: [id])
  
  // Tagging
  tags              StoryTag[]
  
  // Audio
  audioClips        AudioClip[]
  
  // Comments
  comments          Comment[]
  
  // Translation workflow
  translationRequests Translation[]     @relation("OriginalStory")
  assignedTranslations Translation[]    @relation("TranslatedStory")
  
  // Timestamps
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  followUpDate        DateTime?           // Editorial follow-up date
  followUpNote        String?             // Optional follow-up note
  followUpCompleted   Boolean @default(false)
  followUpCompletedAt DateTime?
  followUpCompletedBy String?
  scheduledPublishAt  DateTime?           // Scheduled publish date/time
  
  // Review checklist data (stored as JSON)
  reviewChecklist   Json?               // Stores tier 1 review checklist completion state
  
  // Bulletin relationships
  bulletinStories   BulletinStory[]
  
  @@index([status])
  @@index([authorId])
  @@index([categoryId])
  @@index([slug])
  @@index([language])
  @@index([isTranslation])
  @@index([originalStoryId])
  @@index([storyGroupId])
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?
  color       String?
  
  parentId    String?
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  level       Int        @default(1) // 1=Parent, 2=Sub, 3=Sub-Sub
  
  isParent    Boolean    @default(false)
  isEditable  Boolean    @default(true) // false for parent categories
  
  stories     Story[]
  bulletins   Bulletin[]
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@index([parentId])
  @@index([level])
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  slug      String     @unique
  color     String?
  category  TagCategory @default(GENERAL)
  isRequired Boolean   @default(false) // For LANGUAGE and RELIGION tags
  isPreset   Boolean   @default(false) // For LOCALITY tags (provinces)
  stories   StoryTag[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  @@index([category])
  @@index([isRequired])
}

model StoryTag {
  storyId String
  tagId   String
  story   Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)
  tag     Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([storyId, tagId])
}

model AudioClip {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  url         String
  duration    Int?
  fileSize    Int?
  mimeType    String
  
  storyId     String
  story       Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  
  uploadedBy  String
  uploader    User     @relation(fields: [uploadedBy], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([storyId])
}

model Comment {
  id          String      @id @default(cuid())
  content     String      @db.Text
  type        CommentType @default(GENERAL)
  category    String?     // For revision notes categorization
  
  storyId     String
  story       Story       @relation(fields: [storyId], references: [id], onDelete: Cascade)
  
  authorId    String
  author      User        @relation(fields: [authorId], references: [id])
  
  parentId    String?
  parent      Comment?    @relation("CommentReplies", fields: [parentId], references: [id])
  replies     Comment[]   @relation("CommentReplies")
  
  isResolved  Boolean     @default(false)
  resolvedBy  String?
  resolver    User?       @relation("ResolvedComments", fields: [resolvedBy], references: [id])
  resolvedAt  DateTime?
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@index([storyId])
  @@index([authorId])
}

// TRANSLATION WORKFLOW MODELS

model Translation {
  id                String            @id @default(cuid())
  status            TranslationStatus @default(PENDING)
  targetLanguage    StoryLanguage
  
  // Story relationships
  originalStoryId   String
  originalStory     Story             @relation("OriginalStory", fields: [originalStoryId], references: [id], onDelete: Cascade)
  translatedStoryId String?
  translatedStory   Story?            @relation("TranslatedStory", fields: [translatedStoryId], references: [id])
  
  // Assignment and workflow
  assignedToId      String?
  assignedTo        User?             @relation("AssignedTranslations", fields: [assignedToId], references: [id])
  reviewerId        String?
  reviewer          User?             @relation("ReviewedTranslations", fields: [reviewerId], references: [id])
  
  // Progress tracking
  startedAt         DateTime?
  completedAt       DateTime?
  reviewedAt        DateTime?
  approvedAt        DateTime?
  rejectedAt        DateTime?
  publishedAt       DateTime?
  
  // Notes and feedback
  translatorNotes   String?           @db.Text
  reviewerNotes     String?           @db.Text
  rejectionReason   String?           @db.Text
  
  // Timestamps
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@index([status])
  @@index([originalStoryId])
  @@index([translatedStoryId])
  @@index([assignedToId])
  @@index([targetLanguage])
}

model StoryGroup {
  id                String    @id @default(cuid())
  name              String
  description       String?
  
  // Publishing coordination
  publishTogether   Boolean   @default(true)
  scheduledPublishAt DateTime?
  publishedAt       DateTime?
  
  // Stories in this group
  stories           Story[]
  
  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@index([publishTogether])
  @@index([scheduledPublishAt])
}

// Email tracking model
model EmailLog {
  id              String       @id @default(cuid())
  to              String
  from            String?
  subject         String
  type            EmailType
  status          EmailStatus  @default(PENDING)
  
  // User relationship (optional - system emails might not have a user)
  userId          String?
  user            User?        @relation(fields: [userId], references: [id])
  
  // Email provider details
  providerId      String?      // SendGrid message ID or similar
  
  // Additional metadata
  metadata        Json?        // Store email content, error details, etc.
  
  // Status tracking
  sentAt          DateTime?
  deliveredAt     DateTime?
  failedAt        DateTime?
  failureReason   String?
  
  // Environment info
  environment     String?      // development, staging, production
  
  // Timestamps
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  @@index([userId])
  @@index([status])
  @@index([type])
  @@index([createdAt])
}

// Announcement models
model Announcement {
  id                String                    @id @default(cuid())
  title             String
  message           String
  priority          AnnouncementPriority      @default(MEDIUM)
  targetAudience    AnnouncementTargetAudience @default(ALL)
  isActive          Boolean                   @default(true)
  expiresAt         DateTime?
  
  // Author relationship
  authorId          String
  author            User                      @relation("AuthoredAnnouncements", fields: [authorId], references: [id])
  
  // User dismissals
  dismissals        UserAnnouncementDismissal[]
  
  // Timestamps
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  
  @@index([isActive])
  @@index([targetAudience])
  @@index([priority])
  @@index([createdAt])
  @@index([expiresAt])
}

model UserAnnouncementDismissal {
  id              String       @id @default(cuid())
  
  // User relationship
  userId          String
  user            User         @relation(fields: [userId], references: [id])
  
  // Announcement relationship
  announcementId  String
  announcement    Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  
  // Dismissal timestamp
  dismissedAt     DateTime     @default(now())
  
  @@unique([userId, announcementId])
  @@index([userId])
  @@index([announcementId])
}

// Bulletin Schedule Model
model BulletinSchedule {
  id               String               @id @default(cuid())
  title            String
  time             String               // Format: "HH:MM"
  language         StoryLanguage
  scheduleType     BulletinScheduleType
  isActive         Boolean              @default(true)
  
  createdBy        String
  creator          User                 @relation(fields: [createdBy], references: [id])
  
  bulletins        Bulletin[]
  
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  
  @@unique([time, language, scheduleType])
  @@index([scheduleType, isActive])
}

// Bulletin Model
model Bulletin {
  id               String               @id @default(cuid())
  title            String
  slug             String               @unique
  intro            String               @db.Text  // Rich text content
  outro            String               @db.Text  // Rich text content
  language         StoryLanguage
  status           BulletinStatus       @default(DRAFT)
  
  // Schedule reference
  scheduleId       String?
  schedule         BulletinSchedule?    @relation(fields: [scheduleId], references: [id])
  scheduledFor     DateTime?            // The specific date/time this bulletin is for
  
  // Author and review workflow
  authorId         String
  author           User                 @relation("AuthoredBulletins", fields: [authorId], references: [id])
  reviewerId       String?
  reviewer         User?                @relation("ReviewedBulletins", fields: [reviewerId], references: [id])
  publishedBy      String?
  publisher        User?                @relation("PublishedBulletins", fields: [publishedBy], references: [id])
  
  // Publishing
  publishedAt      DateTime?
  
  // Stories in bulletin
  bulletinStories  BulletinStory[]
  
  // Review checklist
  reviewChecklist  Json?                // Same structure as stories
  
  // Category (News Bulletins)
  categoryId       String
  category         Category             @relation(fields: [categoryId], references: [id])
  
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  
  @@index([status, language])
  @@index([scheduledFor])
}

// Junction table for bulletin stories with ordering
model BulletinStory {
  id               String               @id @default(cuid())
  bulletinId       String
  bulletin         Bulletin             @relation(fields: [bulletinId], references: [id], onDelete: Cascade)
  storyId          String
  story            Story                @relation(fields: [storyId], references: [id])
  order            Int                  // Order of story in bulletin
  
  addedAt          DateTime             @default(now())
  
  @@unique([bulletinId, storyId])
  @@index([bulletinId, order])
}

 